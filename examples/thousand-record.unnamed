let Nat  : _ = (N : U) -> (N -> N) -> N -> N
  ; five : Nat = \N s z. s (s (s (s (s z))))
  ; add  : Nat -> Nat -> Nat = \a b N s z. a N s (b N s z)
  ; mul  : Nat -> Nat -> Nat = \a b N s z. a N (b N s) z
  ; ten      : _ = add five five
  ; hundred  : _ = mul ten ten
  ; thousand : _ = mul ten hundred
  ; dup : Nat -> Record { fst : Nat, snd : Nat }
        = \a. { fst = a, snd = mul a five }
  ; record : _ =
    { ten = ten, record = { hundred = hundred, thousand = thousand } }
 in { dup = dup five, thousand = record.record.thousand }
