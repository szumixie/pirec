let Nat  : _ = (N : U) -> (N -> N) -> N -> N
  ; five : Nat = \N s z. s (s (s (s (s z))))
  ; add  : Nat -> Nat -> Nat = \a b N s z. a N s (b N s z)
  ; mul  : Nat -> Nat -> Nat = \a b N s z. a N (b N s) z
  ; ten      : _ = add five five
  ; hundred  : _ = mul ten ten
  ; thousand : _ = mul ten hundred
  ; F : Nat -> U = \n. n U (\A. Record { fst : Nat, snd : A }) (Record {})
  ; x : F five
          = { fst = five
    , snd = { fst = ten
    , snd = { fst = hundred
    , snd = { fst = thousand
    , snd = { fst = \N s z. z
    , snd = {=} } } } } }
 in x.snd.snd
